from confluent_kafka import Producer
import yfinance as yf
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
KAFKA_BROKER = "localhost:9092"
TOPIC_NAME = "historical-data"

producer = Producer({'bootstrap.servers': KAFKA_BROKER})

# –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
STOCKS = ["AAPL", "MSFT", "GOOGL", "TSLA", "AMZN"]

def fetch_and_send_historical_data():
    for symbol in STOCKS:
        try:
            print(f"üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
            stock = yf.Ticker(symbol)
            data = stock.history(period="10y")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 10 –ª–µ—Ç

            for timestamp, row in data.iterrows():
                message = {
                    "symbol": symbol,
                    "timestamp": str(timestamp),
                    "open_price": round(row["Open"], 2),
                    "close_price": round(row["Close"], 2),
                    "high_price": round(row["High"], 2),
                    "low_price": round(row["Low"], 2),
                    "volume": int(row["Volume"]),
                }

                producer.produce(TOPIC_NAME, key=symbol, value=json.dumps(message))

            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Kafka.")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {symbol}: {e}")

    producer.flush()

if __name__ == "__main__":
    fetch_and_send_historical_data()
