from fastapi import FastAPI
import torch
import json
from kafka import KafkaProducer
from ml_model.predict import predict, load_model, count_parameters, get_latest_data, prepare_input, send_prediction
import uvicorn

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
KAFKA_BROKER = "localhost:9092"
OUTPUT_TOPIC = "predictions"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API
model = load_model()

@app.get("/")
def read_root():
    return {"message": "üöÄ FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /predict –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞."}

@app.get("/predict/")
def get_prediction():
    try:
        df = get_latest_data()
        if df is None or df.empty:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Kafka –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è!"}

        X_input, scaler = prepare_input(df)

        with torch.no_grad():
            prediction = model(X_input).item()

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–Ω—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
        prediction = scaler.inverse_transform([[0, 0, 0, prediction, 0]])[0][3]
        symbol = df.iloc[-1]["symbol"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ Kafka
        send_prediction(prediction, symbol)

        return {"symbol": symbol, "predicted_close_price": round(prediction, 2)}
    except Exception as e:
        return {"error": str(e)}

@app.get("/model_info/")
def get_model_info():
    return {"parameters_count": count_parameters(model)}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
